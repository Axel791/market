// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/auth/scenarios/scenarios.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/Axel791/auth/internal/usecases/auth/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockRegistration is a mock of Registration interface.
type MockRegistration struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationMockRecorder
}

// MockRegistrationMockRecorder is the mock recorder for MockRegistration.
type MockRegistrationMockRecorder struct {
	mock *MockRegistration
}

// NewMockRegistration creates a new mock instance.
func NewMockRegistration(ctrl *gomock.Controller) *MockRegistration {
	mock := &MockRegistration{ctrl: ctrl}
	mock.recorder = &MockRegistrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistration) EXPECT() *MockRegistrationMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRegistration) Execute(ctx context.Context, userDTO dto.UserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, userDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockRegistrationMockRecorder) Execute(ctx, userDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegistration)(nil).Execute), ctx, userDTO)
}

// MockLogin is a mock of Login interface.
type MockLogin struct {
	ctrl     *gomock.Controller
	recorder *MockLoginMockRecorder
}

// MockLoginMockRecorder is the mock recorder for MockLogin.
type MockLoginMockRecorder struct {
	mock *MockLogin
}

// NewMockLogin creates a new mock instance.
func NewMockLogin(ctrl *gomock.Controller) *MockLogin {
	mock := &MockLogin{ctrl: ctrl}
	mock.recorder = &MockLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogin) EXPECT() *MockLoginMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockLogin) Execute(ctx context.Context, userDTO dto.UserDTO) (dto.TokenDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, userDTO)
	ret0, _ := ret[0].(dto.TokenDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockLoginMockRecorder) Execute(ctx, userDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockLogin)(nil).Execute), ctx, userDTO)
}

// MockValidate is a mock of Validate interface.
type MockValidate struct {
	ctrl     *gomock.Controller
	recorder *MockValidateMockRecorder
}

// MockValidateMockRecorder is the mock recorder for MockValidate.
type MockValidateMockRecorder struct {
	mock *MockValidate
}

// NewMockValidate creates a new mock instance.
func NewMockValidate(ctrl *gomock.Controller) *MockValidate {
	mock := &MockValidate{ctrl: ctrl}
	mock.recorder = &MockValidateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidate) EXPECT() *MockValidateMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockValidate) Execute(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockValidateMockRecorder) Execute(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockValidate)(nil).Execute), ctx, token)
}
