// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/loyalty/repositories/repositories.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domains "github.com/Axel791/loyalty/internal/domains"
	gomock "github.com/golang/mock/gomock"
)

// MockLoyaltyRepository is a mock of LoyaltyRepository interface.
type MockLoyaltyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoyaltyRepositoryMockRecorder
}

// MockLoyaltyRepositoryMockRecorder is the mock recorder for MockLoyaltyRepository.
type MockLoyaltyRepositoryMockRecorder struct {
	mock *MockLoyaltyRepository
}

// NewMockLoyaltyRepository creates a new mock instance.
func NewMockLoyaltyRepository(ctrl *gomock.Controller) *MockLoyaltyRepository {
	mock := &MockLoyaltyRepository{ctrl: ctrl}
	mock.recorder = &MockLoyaltyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoyaltyRepository) EXPECT() *MockLoyaltyRepositoryMockRecorder {
	return m.recorder
}

// ConclusionUserBalance mocks base method.
func (m *MockLoyaltyRepository) ConclusionUserBalance(ctx context.Context, userBalance domains.LoyaltyBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConclusionUserBalance", ctx, userBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConclusionUserBalance indicates an expected call of ConclusionUserBalance.
func (mr *MockLoyaltyRepositoryMockRecorder) ConclusionUserBalance(ctx, userBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConclusionUserBalance", reflect.TypeOf((*MockLoyaltyRepository)(nil).ConclusionUserBalance), ctx, userBalance)
}

// CreateUserBalance mocks base method.
func (m *MockLoyaltyRepository) CreateUserBalance(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserBalance", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserBalance indicates an expected call of CreateUserBalance.
func (mr *MockLoyaltyRepositoryMockRecorder) CreateUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserBalance", reflect.TypeOf((*MockLoyaltyRepository)(nil).CreateUserBalance), ctx, userID)
}

// GetUserBalance mocks base method.
func (m *MockLoyaltyRepository) GetUserBalance(ctx context.Context, userID int64) (domains.LoyaltyBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(domains.LoyaltyBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockLoyaltyRepositoryMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockLoyaltyRepository)(nil).GetUserBalance), ctx, userID)
}

// InputUserBalance mocks base method.
func (m *MockLoyaltyRepository) InputUserBalance(ctx context.Context, userBalance domains.LoyaltyBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputUserBalance", ctx, userBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// InputUserBalance indicates an expected call of InputUserBalance.
func (mr *MockLoyaltyRepositoryMockRecorder) InputUserBalance(ctx, userBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputUserBalance", reflect.TypeOf((*MockLoyaltyRepository)(nil).InputUserBalance), ctx, userBalance)
}

// MockLoyaltyHistoryRepository is a mock of LoyaltyHistoryRepository interface.
type MockLoyaltyHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoyaltyHistoryRepositoryMockRecorder
}

// MockLoyaltyHistoryRepositoryMockRecorder is the mock recorder for MockLoyaltyHistoryRepository.
type MockLoyaltyHistoryRepositoryMockRecorder struct {
	mock *MockLoyaltyHistoryRepository
}

// NewMockLoyaltyHistoryRepository creates a new mock instance.
func NewMockLoyaltyHistoryRepository(ctrl *gomock.Controller) *MockLoyaltyHistoryRepository {
	mock := &MockLoyaltyHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockLoyaltyHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoyaltyHistoryRepository) EXPECT() *MockLoyaltyHistoryRepositoryMockRecorder {
	return m.recorder
}

// CreateLoyaltyHistory mocks base method.
func (m *MockLoyaltyHistoryRepository) CreateLoyaltyHistory(ctx context.Context, history domains.LoyaltyHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoyaltyHistory", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoyaltyHistory indicates an expected call of CreateLoyaltyHistory.
func (mr *MockLoyaltyHistoryRepositoryMockRecorder) CreateLoyaltyHistory(ctx, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoyaltyHistory", reflect.TypeOf((*MockLoyaltyHistoryRepository)(nil).CreateLoyaltyHistory), ctx, history)
}

// GetUserHistory mocks base method.
func (m *MockLoyaltyHistoryRepository) GetUserHistory(ctx context.Context, userID int64) ([]domains.LoyaltyHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistory", ctx, userID)
	ret0, _ := ret[0].([]domains.LoyaltyHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistory indicates an expected call of GetUserHistory.
func (mr *MockLoyaltyHistoryRepositoryMockRecorder) GetUserHistory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistory", reflect.TypeOf((*MockLoyaltyHistoryRepository)(nil).GetUserHistory), ctx, userID)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUnitOfWork) Do(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUnitOfWorkMockRecorder) Do(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUnitOfWork)(nil).Do), ctx, fn)
}
